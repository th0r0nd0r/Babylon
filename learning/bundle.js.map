{"version":3,"sources":["webpack:///webpack/bootstrap a5571d8573f8b5c32830","webpack:///./babylon.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA,qDAAqD;;AAErD,8CAA8C;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA,eAAe,sBAAsB;AACrC;;AAEA,qDAAqD,gBAAgB;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,wGAAwG,aAAa;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA,CAAC;;AAED,+DAA+D,4BAA4B;AAC3F;AACA,4GAA4G,UAAU;;;AAGtH;;AAEA;;AAEA;;AAEA,kCAAkC;AAClC;AACA,CAAC;;;AAGD,+CAA+C;AAC/C;AACA,CAAC,E","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a5571d8573f8b5c32830","var canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element \n\nvar engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n\nconst translatePositions = (positions) => {\n  console.log(\"positions: \", positions);\n  console.log(positions.length);\n  let yIdx = 1;\n  let zIdx = 2;\n\n  const length = positions.length - 2;\n  for (let i = 0; i <= length; i++) {\n    // console.log(\"i: \", i);\n    console.log(\"length: \", positions.length);\n    if (i === zIdx) {\n      let z = positions[zIdx];\n      let y = positions[yIdx];\n\n      positions[zIdx] = y;\n      positions[yIdx] = z;\n\n      zIdx += 3;\n      yIdx += 3;\n    }\n\n\n  }\n\n  console.log(\"updated positions: \", positions);\n  return positions;\n};\n\n\nvar createScene = function () {\n\n  // This creates a basic Babylon Scene object (non-mesh)\n  var scene = new BABYLON.Scene(engine);\nscene.enablePhysics();\n\n  var camera = new BABYLON.ArcRotateCamera(\"Camera\", 3 * Math.PI / 2, Math.PI / 2, 30, BABYLON.Vector3.Zero(), scene);\n\ncamera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  var light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  var subdivisions = 20;\nvar groundWidth = 8;\n\nvar distanceBetweenPoints = groundWidth / subdivisions;\t\n\nvar clothMat = new BABYLON.StandardMaterial(\"texture3\", scene);\n  clothMat.diffuseTexture = new BABYLON.Texture(\"http://i.imgur.com/2HklR1L.jpg\", scene);\nclothMat.zOffset = -20;\nclothMat.backFaceCulling = false;\n\n  // Our built-in 'ground' shape. Params: name, width, depth, subdivs, scene\n  var ground = BABYLON.Mesh.CreateGround(\"ground1\", groundWidth, groundWidth, subdivisions - 1, scene, true);\n// var ground2 = BABYLON.Mesh.CreateGround(\"ground2\", groundWidth, groundWidth, 2, scene, false);\nground.material = clothMat;\n  // ground2.material = clothMat;\n\n  // ground.rotation.x = Math.PI / 2;\n  // ground2.rotation.y = Math.PI;\n  \nvar positions = translatePositions(ground.getVerticesData(BABYLON.VertexBuffer.PositionKind));\nground.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\n\n\nvar spheres = [];\nfor (var i = 0; i < positions.length; i = i + 3) {\n  var v = BABYLON.Vector3.FromArray(positions, i);\n  \n  var s = BABYLON.MeshBuilder.CreateSphere(\"s\" + i, { diameter: 0.1 }, scene);\n  s.position.copyFrom(v);\n  spheres.push(s);\n}\n\nfunction createJoint(imp1, imp2) {\n  var joint = new BABYLON.DistanceJoint({\n    maxDistance: distanceBetweenPoints\n  })\n  imp1.addJoint(imp2, joint);\n}\n\n//create the impostors\nspheres.forEach(function (point, idx) {\n  var mass = 1;\n  point.physicsImpostor = new BABYLON.PhysicsImpostor(point, BABYLON.PhysicsImpostor.ParticleImpostor, { mass: mass }, scene);\n  point.physicsImpostor.setLinearVelocity( new BABYLON.Vector3(0,12,0));\n      if (idx >= subdivisions) {\n    createJoint(point.physicsImpostor, spheres[idx - subdivisions].physicsImpostor);\n    if (idx % subdivisions) {\n      createJoint(point.physicsImpostor, spheres[idx - 1].physicsImpostor);\n    }\n  }\n});\n\nground.registerBeforeRender(function () {\n  var positions = [];\n  spheres.forEach(function (s) {\n    positions.push(s.position.x, s.position.y, s.position.z);\n\n  });\n  ground.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\n  ground.refreshBoundingInfo();\n});\n\nvar bigSphere = BABYLON.MeshBuilder.CreateSphere(\"bigSphere\", { diameter: 4, segments: 16 }, scene);\nbigSphere.position.y = -8;\nbigSphere.physicsImpostor = new BABYLON.PhysicsImpostor(bigSphere, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 0 }, scene);\n\n\n  return scene;\n\n};\n\nvar scene = createScene();\n\nengine.runRenderLoop(function () { // Register a render loop to repeatedly render the scene\n        scene.render();\n});\n\n\nwindow.addEventListener(\"resize\", function () { // Watch for browser/canvas resize events\n        engine.resize();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./babylon.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}